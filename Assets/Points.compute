#pragma kernel Main

struct Point{
    float2 position;
    float angle;
};

#define PI 3.1415

float deltaTime;
float4 time;

float angleChangeRate;
float maxAngle;

float pointSpeed;

int width;
int height;

int numberOfPoints;

RWStructuredBuffer<Point> points;
RWTexture2D<float4> map;

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}



void UpdatePoint(uint3 id){
    if(id.x >= numberOfPoints){
        return;
    }

    float2 pos = points[id.x].position;
    float angle = points[id.x].angle;

    float2 newPos = pos + pointSpeed * deltaTime * float2(cos(angle), sin(angle));
    

    if(newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height){
        uint random = hash(pos.y * width + pos.x + hash(id.x + time * 100000));

        points[id.x].angle = 2 * PI * scaleToRange01(random);
        newPos.x = clamp(newPos.x, 0, width - 1);
        newPos.y = clamp(newPos.y, 0, height - 1);
    }

    points[id.x].position = newPos;
    map[int2(newPos.x, newPos.y)] = 1.0;
}

[numthreads(32,1,1)]
void Main(uint3 id : SV_DispatchThreadID){
    UpdatePoint(id);
}

