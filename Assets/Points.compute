#pragma kernel Main

struct Point{
    float2 position;
    float speed;
    float angle;
};

#define PI 3.14159265358979311599796

float deltaTime;
float4 time;
float angleChangeRate;
float maxAngle;

uint width;
uint height;

RWStructuredBuffer<Point> points;
RWTexture2D<float4> map;

float hash11(float p)
{
    p = frac(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return frac(p);
}

uint pcg_hash(uint input)
{
    uint state = input * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float ConvertHashToFloat(uint hash){
    return hash / 4294967295.0;
}

void UpdatePoint(uint3 id){
    float2 pos = points[id.x].position;
    float speed = points[id.x].speed;
    float angle = points[id.x].angle;

    uint randomIndex = pos.x * width + pos.y + pcg_hash(id.x);
    float rand = ConvertHashToFloat(pcg_hash(randomIndex << 1));

    float2 newPos = pos + (speed * deltaTime * float2(cos(angle * 2 * PI), sin(angle * 2 * PI)) );
    

    if(newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height){
        newPos.x = clamp(newPos.x, 1, width - 1.0);
        newPos.y = clamp(newPos.y, 1, height - 1.0);
        points[id.x].angle = rand * 2 * PI;
    }

    points[id.x].position = newPos;
    map[int2(newPos.x, newPos.y)] = 1;
}



[numthreads(32,1,1)]
void Main(uint3 id : SV_DispatchThreadID){
    UpdatePoint(id);
}

